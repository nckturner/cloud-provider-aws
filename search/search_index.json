{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is the official documentation for the Kubernetes AWS cloud provider. WARNING: this docs site is actively under development. Cloud Controller Manager Prerequisites Getting Started Development","title":"Home"},{"location":"#home","text":"This is the official documentation for the Kubernetes AWS cloud provider. WARNING: this docs site is actively under development. Cloud Controller Manager Prerequisites Getting Started Development","title":"Home"},{"location":"TODO/","text":"TODO Prereqs Document required instance tags (i.e. KubernetesCluster: ) Load Balancers document all available label/annotations to configure ELBs/NLBs for Service Type=LoadBalancer Known Limitations Document limitation with hostname / private DNS? Kops Add a full example (ideally with IAM roles)","title":"TODO"},{"location":"TODO/#todo","text":"","title":"TODO"},{"location":"TODO/#prereqs","text":"Document required instance tags (i.e. KubernetesCluster: )","title":"Prereqs"},{"location":"TODO/#load-balancers","text":"document all available label/annotations to configure ELBs/NLBs for Service Type=LoadBalancer","title":"Load Balancers"},{"location":"TODO/#known-limitations","text":"Document limitation with hostname / private DNS?","title":"Known Limitations"},{"location":"TODO/#kops","text":"Add a full example (ideally with IAM roles)","title":"Kops"},{"location":"development/","text":"Development A local single node cluster can be brought up on AWS by running the local up script while on an AWS EC2 instance. Before running this, ensure that the instance you are running on has the KubernetesCluster tag. The tag can be any value. ./hack/local-up-cluster.sh By default this script will use the cloud provider binary from this repository. You will need to have the k8s main repo cloned before running this script.","title":"Development"},{"location":"development/#development","text":"A local single node cluster can be brought up on AWS by running the local up script while on an AWS EC2 instance. Before running this, ensure that the instance you are running on has the KubernetesCluster tag. The tag can be any value. ./hack/local-up-cluster.sh By default this script will use the cloud provider binary from this repository. You will need to have the k8s main repo cloned before running this script.","title":"Development"},{"location":"getting_started/","text":"Getting Started Before you start, make sure you go through the prerequisites . In order to launch a cluster running the aws-cloud-controller-manager, you can run the appropriate container image release from this repository on an existing cluster, or you can use a deployment tool that has support for deploying it, like kops. Running on an Existing Cluster Follow these steps when upgrading an existing cluster by launching the aws-cloud-controller-manager as a pod: Temporarily stop the kube-controller-managers from running. Add the --cloud-provider=external to the kube-controller-manager config. Add the --cloud-provider=external to the kube-apiserver config. Add the --cloud-provider=external to each the kubelet's config. Deploy the required RBAC to your cluster: kubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/master/manifests/rbac.yaml Deploy the cloud-controller-manager to your cluster: kubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/master/manifests/aws-cloud-controller-manager-daemonset.yaml Flags flag component description --cloud-provider=external kube-apiserver Disables the cloud provider in the API Server. --cloud-provider=external kube-controller-manager Disables the cloud provider in the Kube Controller Manager. --cloud-provider=external kubelet Disables the cloud provider in the Kubelet. --cloud-provider=[aws|aws/v2] aws-cloud-controller-manager Optional. Selects the legacy cloud-provider or the v2 cloud-provider in the aws-cloud-controller-manager. WARNING: the v2 cloud-provider is in a pre-alpha state. --external-cloud-volume-plugin=aws kube-controller-manager Tells the Kube Controller Manager to run the volume loops that have cloud provider code in them. This is required for volumes to work if you are not using CSI with migration enabled. Using Kops In order to create a cluster using kops, the following flags should be set in your cluster.yaml in order to pass the correct flags to the control plane components. apiVersion: kops.k8s.io/v1alpha2 kind: Cluster metadata: name: cloud-controller-example spec: cloudControllerManager: cloudProvider: aws kubeControllerManager: externalCloudVolumePlugin: aws cloudProvider: aws kubeAPIServer: cloudProvider: external kubelet: cloudProvider: aws Note: the above config omits all config not related to the aws-cloud-controller-manager Check examples/kops for a full kops configuration. (TODO)","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Before you start, make sure you go through the prerequisites . In order to launch a cluster running the aws-cloud-controller-manager, you can run the appropriate container image release from this repository on an existing cluster, or you can use a deployment tool that has support for deploying it, like kops.","title":"Getting Started"},{"location":"getting_started/#running-on-an-existing-cluster","text":"Follow these steps when upgrading an existing cluster by launching the aws-cloud-controller-manager as a pod: Temporarily stop the kube-controller-managers from running. Add the --cloud-provider=external to the kube-controller-manager config. Add the --cloud-provider=external to the kube-apiserver config. Add the --cloud-provider=external to each the kubelet's config. Deploy the required RBAC to your cluster: kubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/master/manifests/rbac.yaml Deploy the cloud-controller-manager to your cluster: kubectl apply -f https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/master/manifests/aws-cloud-controller-manager-daemonset.yaml","title":"Running on an Existing Cluster"},{"location":"getting_started/#flags","text":"flag component description --cloud-provider=external kube-apiserver Disables the cloud provider in the API Server. --cloud-provider=external kube-controller-manager Disables the cloud provider in the Kube Controller Manager. --cloud-provider=external kubelet Disables the cloud provider in the Kubelet. --cloud-provider=[aws|aws/v2] aws-cloud-controller-manager Optional. Selects the legacy cloud-provider or the v2 cloud-provider in the aws-cloud-controller-manager. WARNING: the v2 cloud-provider is in a pre-alpha state. --external-cloud-volume-plugin=aws kube-controller-manager Tells the Kube Controller Manager to run the volume loops that have cloud provider code in them. This is required for volumes to work if you are not using CSI with migration enabled.","title":"Flags"},{"location":"getting_started/#using-kops","text":"In order to create a cluster using kops, the following flags should be set in your cluster.yaml in order to pass the correct flags to the control plane components. apiVersion: kops.k8s.io/v1alpha2 kind: Cluster metadata: name: cloud-controller-example spec: cloudControllerManager: cloudProvider: aws kubeControllerManager: externalCloudVolumePlugin: aws cloudProvider: aws kubeAPIServer: cloudProvider: external kubelet: cloudProvider: aws Note: the above config omits all config not related to the aws-cloud-controller-manager Check examples/kops for a full kops configuration. (TODO)","title":"Using Kops"},{"location":"prerequisites/","text":"Prerequisites IAM Policies For the aws-cloud-controller-manager to be able to communicate to AWS APIs, you will need to create a few IAM policies for your EC2 instances. The control plane (formerly master) policy is a bit open and can be scaled back depending on the use case. Adjust these based on your needs. Control Plane Policy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:DescribeTags\", \"ec2:DescribeInstances\", \"ec2:DescribeRegions\", \"ec2:DescribeRouteTables\", \"ec2:DescribeSecurityGroups\", \"ec2:DescribeSubnets\", \"ec2:DescribeVolumes\", \"ec2:CreateSecurityGroup\", \"ec2:CreateTags\", \"ec2:CreateVolume\", \"ec2:ModifyInstanceAttribute\", \"ec2:ModifyVolume\", \"ec2:AttachVolume\", \"ec2:AuthorizeSecurityGroupIngress\", \"ec2:CreateRoute\", \"ec2:DeleteRoute\", \"ec2:DeleteSecurityGroup\", \"ec2:DeleteVolume\", \"ec2:DetachVolume\", \"ec2:RevokeSecurityGroupIngress\", \"ec2:DescribeVpcs\", \"elasticloadbalancing:AddTags\", \"elasticloadbalancing:AttachLoadBalancerToSubnets\", \"elasticloadbalancing:ApplySecurityGroupsToLoadBalancer\", \"elasticloadbalancing:CreateLoadBalancer\", \"elasticloadbalancing:CreateLoadBalancerPolicy\", \"elasticloadbalancing:CreateLoadBalancerListeners\", \"elasticloadbalancing:ConfigureHealthCheck\", \"elasticloadbalancing:DeleteLoadBalancer\", \"elasticloadbalancing:DeleteLoadBalancerListeners\", \"elasticloadbalancing:DescribeLoadBalancers\", \"elasticloadbalancing:DescribeLoadBalancerAttributes\", \"elasticloadbalancing:DetachLoadBalancerFromSubnets\", \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\", \"elasticloadbalancing:ModifyLoadBalancerAttributes\", \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\", \"elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer\", \"elasticloadbalancing:AddTags\", \"elasticloadbalancing:CreateListener\", \"elasticloadbalancing:CreateTargetGroup\", \"elasticloadbalancing:DeleteListener\", \"elasticloadbalancing:DeleteTargetGroup\", \"elasticloadbalancing:DescribeListeners\", \"elasticloadbalancing:DescribeLoadBalancerPolicies\", \"elasticloadbalancing:DescribeTargetGroups\", \"elasticloadbalancing:DescribeTargetHealth\", \"elasticloadbalancing:ModifyListener\", \"elasticloadbalancing:ModifyTargetGroup\", \"elasticloadbalancing:RegisterTargets\", \"elasticloadbalancing:DeregisterTargets\", \"elasticloadbalancing:SetLoadBalancerPoliciesOfListener\", \"iam:CreateServiceLinkedRole\", \"kms:DescribeKey\" ], \"Resource\": [ \"*\" ] } ] } Node Policy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeInstances\", \"ec2:DescribeRegions\", \"ecr:GetAuthorizationToken\", \"ecr:BatchCheckLayerAvailability\", \"ecr:GetDownloadUrlForLayer\", \"ecr:GetRepositoryPolicy\", \"ecr:DescribeRepositories\", \"ecr:ListImages\", \"ecr:BatchGetImage\" ], \"Resource\": \"*\" } ] }","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"","title":"Prerequisites"},{"location":"prerequisites/#iam-policies","text":"For the aws-cloud-controller-manager to be able to communicate to AWS APIs, you will need to create a few IAM policies for your EC2 instances. The control plane (formerly master) policy is a bit open and can be scaled back depending on the use case. Adjust these based on your needs. Control Plane Policy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:DescribeTags\", \"ec2:DescribeInstances\", \"ec2:DescribeRegions\", \"ec2:DescribeRouteTables\", \"ec2:DescribeSecurityGroups\", \"ec2:DescribeSubnets\", \"ec2:DescribeVolumes\", \"ec2:CreateSecurityGroup\", \"ec2:CreateTags\", \"ec2:CreateVolume\", \"ec2:ModifyInstanceAttribute\", \"ec2:ModifyVolume\", \"ec2:AttachVolume\", \"ec2:AuthorizeSecurityGroupIngress\", \"ec2:CreateRoute\", \"ec2:DeleteRoute\", \"ec2:DeleteSecurityGroup\", \"ec2:DeleteVolume\", \"ec2:DetachVolume\", \"ec2:RevokeSecurityGroupIngress\", \"ec2:DescribeVpcs\", \"elasticloadbalancing:AddTags\", \"elasticloadbalancing:AttachLoadBalancerToSubnets\", \"elasticloadbalancing:ApplySecurityGroupsToLoadBalancer\", \"elasticloadbalancing:CreateLoadBalancer\", \"elasticloadbalancing:CreateLoadBalancerPolicy\", \"elasticloadbalancing:CreateLoadBalancerListeners\", \"elasticloadbalancing:ConfigureHealthCheck\", \"elasticloadbalancing:DeleteLoadBalancer\", \"elasticloadbalancing:DeleteLoadBalancerListeners\", \"elasticloadbalancing:DescribeLoadBalancers\", \"elasticloadbalancing:DescribeLoadBalancerAttributes\", \"elasticloadbalancing:DetachLoadBalancerFromSubnets\", \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\", \"elasticloadbalancing:ModifyLoadBalancerAttributes\", \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\", \"elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer\", \"elasticloadbalancing:AddTags\", \"elasticloadbalancing:CreateListener\", \"elasticloadbalancing:CreateTargetGroup\", \"elasticloadbalancing:DeleteListener\", \"elasticloadbalancing:DeleteTargetGroup\", \"elasticloadbalancing:DescribeListeners\", \"elasticloadbalancing:DescribeLoadBalancerPolicies\", \"elasticloadbalancing:DescribeTargetGroups\", \"elasticloadbalancing:DescribeTargetHealth\", \"elasticloadbalancing:ModifyListener\", \"elasticloadbalancing:ModifyTargetGroup\", \"elasticloadbalancing:RegisterTargets\", \"elasticloadbalancing:DeregisterTargets\", \"elasticloadbalancing:SetLoadBalancerPoliciesOfListener\", \"iam:CreateServiceLinkedRole\", \"kms:DescribeKey\" ], \"Resource\": [ \"*\" ] } ] } Node Policy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeInstances\", \"ec2:DescribeRegions\", \"ecr:GetAuthorizationToken\", \"ecr:BatchCheckLayerAvailability\", \"ecr:GetDownloadUrlForLayer\", \"ecr:GetRepositoryPolicy\", \"ecr:DescribeRepositories\", \"ecr:ListImages\", \"ecr:BatchGetImage\" ], \"Resource\": \"*\" } ] }","title":"IAM Policies"}]}